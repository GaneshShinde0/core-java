package com.ganesh.practice;

public class Queue
{
    Node front, rear; // front points to the beginning of the queue
            // rear points to the end of the queue

    class Node // inner class Node is the element of the queue
    {
        int value;

        Node next;

        private Node(int v)
        {
            value = v;
            next = null;
        }
    }
    
    // check whether the queue is empty
    public boolean isEmpty() { 
    	if(this.front.equals(null)&&this.rear.equals(null)) {
    		return true;
    	}
    	return false;
    }
    // return a node from the front
    public Node peek() {
    	if(this.front.equals(null)) {
    		return null;
    	}
    	return this.front;
    }
    
    // remove a node from the front
    public Node dequeue() {
    	if(this.front.equals(null)) {
    		return null;
    	}
    	Node temp = front;
    	this.front = this.front.next;
    	temp.next= null;
    	return temp;
    }
    
    // add a new node at the end
    public void enqueue(Node item) {
    	if(this.front.equals(null)&&this.rear.equals(null)) {
    		this.front = item;
    		this.rear = item;
    	}else {
    		rear.next = item;
    		rear=rear.next;
    	}
    	
    }

    public int size(); // return the number of nodes in the queue
}